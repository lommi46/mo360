<!DOCTYPE html>
<html>
  <head>
    <title><%= htmlWebpackPlugin.options.title %></title>
    <% if (htmlWebpackPlugin.options.prodMode) { %>
      <%= htmlWebpackPlugin.tags.headTags %>
      <style>
        #overlay {
          background-color: #E6E6E6;
          bottom: 0;
          height: 100%;
          left: 0;
          position: fixed;
          right: 0;
          top: 0;
          width: 100%;
          z-index: 2;
        }

        #loader {
          position: absolute;
          left: 50%;
          top: 50%;
          -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
          font-family: Arial, sans-serif !important;
          font-size: 12px !important;
          font-weight: 400 !important;
          line-height: 18px;
          color: rgba(0, 0, 0, 0.87) !important;
          -webkit-font-smoothing: antialiased;
          text-align: center;
        }
      </style>
      <% for (key in htmlWebpackPlugin.files.css) { %>
          <link href="<%= htmlWebpackPlugin.files.css[key] %>" rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'">
          <script>
            /*! loadCSS. [c]2017 Filament Group, Inc. MIT License */
            /* This file is meant as a standalone workflow for
            - testing support for link[rel=preload]
            - enabling async CSS loading in browsers that do not support rel=preload
            - applying rel preload css once loaded, whether supported or not.
            */
            (function (w) {
              "use strict";
              // rel=preload support test
              if (!w.loadCSS) {
                w.loadCSS = function () { };
              }
              // define on the loadCSS obj
              var rp = loadCSS.relpreload = {};
              // rel=preload feature support test
              // runs once and returns a function for compat purposes
              rp.support = (function () {
                var ret;
                try {
                  ret = w.document.createElement("link").relList.supports("preload");
                } catch (e) {
                  ret = false;
                }
                return function () {
                  return ret;
                };
              })();

              // if preload isn't supported, get an asynchronous load by using a non-matching media attribute
              // then change that media back to its intended value on load
              rp.bindMediaToggle = function (link) {
                // remember existing media attr for ultimate state, or default to 'all'
                var finalMedia = link.media || "all";

                function enableStylesheet() {
                  link.media = finalMedia;
                }

                // bind load handlers to enable media
                if (link.addEventListener) {
                  link.addEventListener("load", enableStylesheet);
                } else if (link.attachEvent) {
                  link.attachEvent("onload", enableStylesheet);
                }

                // Set rel and non-applicable media type to start an async request
                // note: timeout allows this to happen async to let rendering continue in IE
                setTimeout(function () {
                  link.rel = "stylesheet";
                  link.media = "only x";
                });
                // also enable media after 3 seconds,
                // which will catch very old browsers (android 2.x, old firefox) that don't support onload on link
                setTimeout(enableStylesheet, 3000);
              };

              // loop through link elements in DOM
              rp.poly = function () {
                // double check this to prevent external calls from running
                if (rp.support()) {
                  return;
                }
                var links = w.document.getElementsByTagName("link");
                for (var i = 0; i < links.length; i++) {
                  var link = links[i];
                  // qualify links to those with rel=preload and as=style attrs
                  if (link.rel === "preload" && link.getAttribute("as") === "style" && !link.getAttribute("data-loadcss")) {
                    // prevent rerunning on link
                    link.setAttribute("data-loadcss", true);
                    // bind listeners to toggle media back
                    rp.bindMediaToggle(link);
                  }
                }
              };

              // if unsupported, run the polyfill
              if (!rp.support()) {
                // run once at least
                rp.poly();

                // rerun poly on an interval until onload
                var run = w.setInterval(rp.poly, 500);
                if (w.addEventListener) {
                  w.addEventListener("load", function () {
                    rp.poly();
                    w.clearInterval(run);
                  });
                } else if (w.attachEvent) {
                  w.attachEvent("onload", function () {
                    rp.poly();
                    w.clearInterval(run);
                  });
                }
              }

              // commonjs
              if (typeof exports !== "undefined") {
                exports.loadCSS = loadCSS;
              }
              else {
                w.loadCSS = loadCSS;
              }
            }(typeof global !== "undefined" ? global : this));
          </script>
          <script></script><!-- here to ensure a non-blocking load still occurs in IE and Edge, even if scripts follow loadCSS in head -->
        
      <% } %>
    <% } %>
  </head>
  <body>
    <% if (htmlWebpackPlugin.options.appMountId) { %>
      <div id="<%= htmlWebpackPlugin.options.appMountId %>">
        <div id="overlay">
          <% if (htmlWebpackPlugin.options.prodMode) { %>
            <div id="loader">
              <p>
                Loading<br />
                App
              </p>
            </div>
          <% } %>
        </div>
      </div>
    <% } %>

    <% if (htmlWebpackPlugin.options.prodMode) { %>
      <% for (key in htmlWebpackPlugin.files.js) { %>
        <script src="<%= htmlWebpackPlugin.files.js[key] %>" type="text/javascript"></script>
      <% } %>
    <% } %>
  </body>
</html>